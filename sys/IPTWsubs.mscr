Sub IPTWdownload
If (InternetConnected("http://www.perdu.com"))
	IPTWcurrentAccuWeatherLocation = argv[1]
	If (IPTWcurrentAccuWeatherLocation eq "My Location")
#		locationData = ReadFile("http://www.maxmind.com/app/mylocation")
#		locBegin = Find(locationData, "Latitude/Longitude") + 57
#		locEnd = Find(locationData, "</td>", locBegin)
#		Split(SubStr(locationData, locBegin, locEnd - locBegin - 1), "/", 1, latitude, longitude)

		latitude = RegRead("HKLM", "Services\myLocation", "Latitude")
		longitude = RegRead("HKLM", "Services\myLocation", "Longitude")
		
		IPTWaccuWeatherRequestURL = IPTWaccuWeatherURL & "slat=" & latitude & "&slon=" & longitude & "&metric=" & IPTWaccuWeatherMetric
	ElseIf (IPTWcurrentAccuWeatherLocation eq "Google Latitude" AND IPTWgoogleUserID ne "")
		locationData= ReadFile("http://www.google.com/latitude/apps/badge/api?user=" & IPTWgoogleUserID & "&type=json")
		locBegin = Find(locationData, "coordinates") + 15
		locEnd = Find(locationData, "]", locBegin)
		Split(SubStr(locationData, locBegin, locEnd - locBegin), ",", 1, longitude, latitude)

		IPTWaccuWeatherRequestURL = IPTWaccuWeatherURL & "slat=" & latitude & "&slon=" & longitude & "&metric=" & IPTWaccuWeatherMetric
	Else
		If (IPTWcurrentAccuWeatherLocation ne "")
			weatherLocation = "location=" & IPTWcurrentAccuWeatherLocation
		Else
			IPTWlocationLatitude = IniRead("..\weather.ini", "User settings", "IPTWlocationLatitude")
			IPTWlocationLongitude = IniRead("..\weather.ini", "User settings", "IPTWlocationLongitude")
			weatherLocation = "slat=" & IPTWlocationLatitude & "slon=" & IPTWlocationLongitude
		EndIf
		IPTWaccuWeatherRequestURL = IPTWaccuWeatherURL & weatherLocation & "&metric=" & IPTWaccuWeatherMetric
	EndIf

	data = ReadFile(IPTWaccuWeatherRequestURL)
	WriteFile(IPTWdataFile, data)

	If (IPTWcurrentAccuWeatherLocation eq IPTWaccuWeatherLocation)
		dataUpdated = 1
	EndIf
EndIf
EndSub

Sub IPTWparse
	If (Find(data,"</adc_database>") > 0)
		xmlConfigFileNumber=1
		While(Find(data, "day number=""" & xmlConfigFileNumber & """"))
			xmlConfigFileNumber = xmlConfigFileNumber + 1
		EndWhile
		xmlConfigFileNumber = xmlConfigFileNumber - 1
		If (xmlConfigFileNumber > 0 AND xmlConfigFileNumber < 8)
			IPTWxmlParserConfigFile = SystemPath("ScriptPath") \ "config" & xmlConfigFileNumber & ".xml"
			xmlParserConfigFile = ReadFile(IPTWxmlParserConfigFile)
			beginXMLPos = Find(xmlParserConfigFile, "<sourcefile>") + 12
			endXMLPos = Find(xmlParserConfigFile, "</sourcefile>", beginXMLPos)
			oldXMLFile = SubStr(xmlParserConfigFile, beginXMLPos, endXMLPos - beginXMLPos)
			If (IPTWdataFile ne oldXMLFile)
				xmlParserConfigFile = Replace(xmlParserConfigFile, oldXMLFile, IPTWdataFile)
				WriteFile(IPTWxmlParserConfigFile, xmlParserConfigFile)
			EndIf
# ############################################################################
# delete all old data from the registry
			IPTWcurrentRegKey = IPTWappRegKey \ argv[1]
			ForEach value, data in regValues(IPTWregRoot, IPTWcurrentRegKey)
				If (value ne "ACSuspendTimeout" \
					AND value ne "ACTimeout" \
					AND value ne "BatteryTimeout" \
					AND value ne "BattSuspendTimeout" \
					AND value ne "ShowingForecast" \
					AND value ne "sleepOnUpdatePrevented" \
					AND value ne "Started")
					If (RegValueExists(IPTWregRoot, IPTWappRegKey, value))
						RegDelete(IPTWregRoot, IPTWappRegKey, value)
					EndIf
					If (RegValueExists(IPTWregRoot, IPTWcurrentRegKey, value))
						RegDelete(IPTWregRoot, IPTWcurrentRegKey, value)
					EndIf
				EndIf
			EndForEach
			RunWait(SystemPath("ScriptPath") \ "xml2reg.exe", IPTWxmlParserConfigFile)
			RegWriteString(IPTWregRoot, IPTWcurrentRegKey, "updateTime", TimeStamp())

# ############################################################################
# copy all data to the location registry key
			ForEach value, data in regValues(IPTWregRoot, IPTWappRegKey)
				If (value ne "ACSuspendTimeout" \
					AND value ne "ACTimeout" \
					AND value ne "BatteryTimeout" \
					AND value ne "BattSuspendTimeout" \
					AND value ne "ShowingForecast" \
					AND value ne "sleepOnUpdatePrevented" \
					AND value ne "Started")
					 RegWriteString(IPTWregRoot, IPTWcurrentRegKey, value, data)
				EndIf
			EndForEach

			url = RegRead(IPTWregRoot, IPTWcurrentRegKey, "url")
			locationCodeBegin = ReverseFind(url, "=") + 1
			locationCode = SubStr(url, locationCodeBegin)
			RegWriteString(IPTWregRoot, IPTWcurrentRegKey, "locationCode", locationCode)
		EndIf
	EndIf
EndSub

Sub IPTWreloadData
	reloadScriptPath = argv[2]
	daysToSkip = argv[1]
	If (daysToSkip = 0)
		foundDay = TRUE
	Else
		daysToSkip = 1
		Call("IPTWfindDay")
	EndIf
	If (foundDay)
		sunset = SubStr("0" & RegRead(IPTWregRoot, IPTWregKey, "sunset" & daysToSkip), -8)
		sunset = Replace(Part(sunset, " ", 2) & " " & Part(sunset, " ", 1), " 12", " 00")
		If (currenttime gt sunset)
			sunsettime = SubStr("0" & Part(sunset, " ", 2), -5)
			If (Part(sunset, " ", 1) eq "PM")
				sunsettime = (12 + Part(sunsettime, ":", 1)) & ":" & Part(sunsettime, ":", 2)
			EndIf
			obstime = RegRead(IPTWregRoot, IPTWregKey, "obstime")
			If (daysToSkip = 0 AND obstime gt sunsettime)
				iPhoneTodayPic = RegRead(IPTWregRoot, IPTWregKey, "icon0") & IPTWnightIconSuffix & "." & IPTWiconsExtension
			Else
				notUseCurrent = TRUE
				iPhoneTodayPic = RegRead(IPTWregRoot, IPTWregKey, "iconN" & daysToSkip) & IPTWnightIconSuffix & "." & IPTWiconsExtension
			EndIf
			suffix = "N"
		Else
			sunrise = SubStr("0" & RegRead(IPTWregRoot, IPTWregKey, "sunrise" & daysToSkip), -8)
			sunrise = Replace(Part(sunrise, " ", 2) & " " & Part(sunrise, " ", 1), " 12", " 00")
			If (currenttime lt sunrise)
				If (daysToSkip = 0)
					iPhoneTodayPic = RegRead(IPTWregRoot, IPTWregKey, "icon0") & IPTWnightIconSuffix & "." & IPTWiconsExtension
				Else
					daysToSkip = daysToSkip - 1
					iPhoneTodayPic = RegRead(IPTWregRoot, IPTWregKey, "iconN" & daysToSkip) & IPTWnightIconSuffix & "." & IPTWiconsExtension
					notUseCurrent = TRUE
				EndIf
				suffix = "N"
			Else
				sunrisetime = SubStr("0" & Part(sunrise, " ", 2), -5)
				If (Part(sunrise, " ", 1) eq "PM")
					sunrisetime = (12 + Part(sunrisetime, ":", 1)) & ":" & Part(sunrisetime, ":", 2)
				EndIf
				obstime = RegRead(IPTWregRoot, IPTWregKey, "obstime")
				If (daysToSkip = 0 AND obstime gt sunrisetime)
					iPhoneTodayPic = RegRead(IPTWregRoot, IPTWregKey, "icon0") & "." & IPTWiconsExtension
				Else
					notUseCurrent = TRUE
					iPhoneTodayPic = RegRead(IPTWregRoot, IPTWregKey, "iconD" & daysToSkip) & "." & IPTWiconsExtension
				EndIf
				suffix = "D"
			EndIf
		EndIf
		CallScript(reloadScriptPath \ "IPTWreloadS2U2.mscr", daysToSkip + 1)
		CallScript(reloadScriptPath \ "IPTWreloadIcon.mscr", IPTWcurrentWeatherPage, IPTWcurrentWeatherIcon, daysToSkip, iPhoneTodayPic, notUseCurrent)
	Else
		iPhoneTodayPic = "AccuWeather" & "." & IPTWiconsExtension
		CallScript(reloadScriptPath \ "IPTWreloadS2U2.mscr", -1)
		CallScript(reloadScriptPath \ "IPTWreloadIcon.mscr", IPTWcurrentWeatherPage, IPTWcurrentWeatherIcon, "N/A", iPhoneTodayPic)
	EndIf
EndSub

Sub waitForReadyIPT
	If (NOT IPTWiPhoneTodayDisabled)
		maxTryTime = TimeStamp() + 20
		If (argv[1] = 1)
			While(RegRead("HKLM", "\Software\iPhonetoday", "reloadIcons") <> 0 AND TimeStamp() < maxTryTime)
				Sleep(200)
			EndWhile
			If (RegRead("HKLM", "\Software\iPhonetoday", "reloadIcons"))
				RegWriteDWord("HKLM", "\Software\iPhonetoday", "reloadIcons", 0)
				Exit
			EndIf
		ElseIf (argv[1] = 2)
			While(RegRead("HKLM", "\Software\iPhonetoday", "reloadIcon") AND RegKeyExists("HKLM", "\Software\iPhonetoday\icon0"))
				Sleep(200)
			EndWhile
			Sleep(500)
		EndIf
	EndIf
EndSub

Sub IPTWfindDay
	foundDay = FALSE
	While (NOT foundDay AND RegValueExists(IPTWregRoot, IPTWregKey, "obsdate" & daysToSkip))
		obsdate = RegRead(IPTWregRoot, IPTWregKey, "obsdate" & daysToSkip)
		obsdate = SubStr("0" & Part(obsdate, "/", 1), -2) & "/" & SubStr("0" & Part(obsdate, "/", 2), -2) & "/" & Part(obsdate, "/", 3)
		If (obsdate eq currentDate)
			foundDay = TRUE
		Else
			daysToSkip = daysToSkip + 1
		EndIf
	EndWhile
EndSub

Sub IPTWsetCurrentTimeAndDate
	timeZone = RegRead(IPTWregRoot, IPTWregKey, "timeZone")
	deviceTimeZone = 60 * (TimeZoneBias() - 60 * RegRead(IPTWregRoot, IPTWregKey, "isDayLight"))
	dataTimeZone = timeZone * 3600
	timeOffset = dataTimeZone - deviceTimeZone
	currentLocalTime = TimeStamp() + timeOffset
	currentDate = FormatTime("m/d/Y", currentLocalTime)
	currenttime = Replace(FormatTime("A h:i", currentLocalTime), " 12", " 00")
EndSub
