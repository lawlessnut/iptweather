ErrorLevel("off")

Include("IPTWsubs.mscr")

# ############################################################################
# General settings
IPTWaccuWeatherMetric		= IniRead("..\weather.ini", "General settings", "IPTWaccuWeatherMetric")
If (IPTWaccuWeatherLocationForecast ne "")
	IPTWaccuWeatherLocation = IPTWaccuWeatherLocationForecast
Else
	IPTWaccuWeatherLocation = IniRead("..\weather.ini", "General settings", "IPTWaccuWeatherLocation")
EndIf
IPTWdelayHours				= IniRead("..\weather.ini", "General settings", "IPTWdelayHours")
IPTWdelayMinutes			= IniRead("..\weather.ini", "General settings", "IPTWdelayMinutes")
IPTWinternetConnectionList	= Split(IniRead("..\weather.ini", "General settings", "IPTWinternetConnection"), ",")
IPTWdisconnectOnExit		= IniRead("..\weather.ini", "General settings", "IPTWdisconnectOnExit")
IPTWobsoleteDataPrefix		= IniRead("..\weather.ini", "General settings", "IPTWobsoleteDataPrefix")
IPTWwakeUpOnUpdate			= IniRead("..\weather.ini", "General settings", "IPTWwakeUpOnUpdate")
IPTWpreventSleepOnUpdate	= IniRead("..\weather.ini", "General settings", "IPTWpreventSleepOnUpdate")
IPTWgoogleUserID			= IniRead("..\weather.ini", "General settings", "IPTWgoogleUserID")
IPTWaccuWeatherAPI			= IniRead("..\weather.ini", "General settings", "IPTWaccuWeatherAPI")
IPTWvjvolubilisPath			= IniRead("..\weather.ini", "General settings", "IPTWvjvolubilisPath")
IPTWaccuWeatherFavoriteLocations	= IniRead("..\weather.ini", "General settings", "IPTWaccuWeatherFavoriteLocations")
IPTWtranslationLanguageCode		= IniRead("..\weather.ini", "General settings", "IPTWtranslationLanguageCode")

# ############################################################################
# iPhoneToday settings
If (IPTWFIP ne "")
	IPTWcurrentWeatherIcon = IPTWFIP
Else
	IPTWcurrentWeatherIcon		= IniRead("..\weather.ini", "iPhoneToday settings", "IPTWcurrentWeatherIcon")
EndIf
IPTWcurrentWeatherPage		= IniRead("..\weather.ini", "iPhoneToday settings", "IPTWcurrentWeatherPage")
IPTWiconsExtension			= IniRead("..\weather.ini", "iPhoneToday settings", "IPTWiconsExtension")
IPTWnightIconSuffix			= IniRead("..\weather.ini", "iPhoneToday settings", "IPTWnightIconSuffix")
IPTWiPhoneTodayDisabled		= IniRead("..\weather.ini", "iPhoneToday settings", "IPTWiPhoneTodayDisabled")
IPTWaccuWeatherIconPath		= IniRead("..\weather.ini", "iPhoneToday settings", "IPTWaccuWeatherIconPath")
IPTWwriteForecastInFile		= IniRead("..\weather.ini", "iPhoneToday settings", "IPTWwriteForecastInFile")

If (IPTWiPhoneTodayDisabled <> 1)
	If (NOT RegRead("HKLM", "Software\Microsoft\Today\Items\iPhoneToday", "Enabled") AND NOT ProcExists("iPhoneToday.exe") AND NOT ProcExists("iPhoneTodayDesktop.exe"))
		If (IPTWiPhoneTodayDisabled <> -1)
			IniWrite("..\weather.ini", "iPhoneToday settings", "IPTWiPhoneTodayDisabled", 1)
		EndIf
		IPTWiPhoneTodayDisabled = 1
	ElseIf (IPTWiPhoneTodayDisabled = -1)
		IPTWiPhoneTodayDisabled = 0
	EndIf
EndIf

# ############################################################################
# Technical settings
IPTWiPhoneTodayClassName	= IniRead("..\weather.ini", "Script settings", "IPTWiPhoneTodayClassName")
IPTWregRoot					= IniRead("..\weather.ini", "Script settings", "IPTWregRoot")
IPTWappRegKey				= IniRead("..\weather.ini", "Script settings", "IPTWregKey")
IPTWregKey					= IPTWappRegKey \ IPTWaccuWeatherLocation
IPTWdataFile				= SystemPath("ScriptPath") \ "data.xml"
IPTWaccuWeatherURL = "http://" & IPTWaccuWeatherAPI & ".accu-weather.com/widget/" & IPTWaccuWeatherAPI & "/weather-data.asp?"
If (IPTWtranslationLanguageCode ne "")
	IPTWaccuWeatherURL = IPTWaccuWeatherURL & "lang=" & IPTWtranslationLanguageCode & "&"
EndIf
If (IPTWaccuWeatherMetric ne "")
	IPTWaccuWeatherURL = IPTWaccuWeatherURL & "metric=" & IPTWaccuWeatherMetric & "&"
EndIf
# ############################################################################
# Set App-to-date version file path
versionFilePath = SystemPath("ScriptPath") \ "version.xml"
RegWriteString("HKCU", "Software\MoDaCo\AppToDate\XML", "IPTWeather", versionFilePath)

If (IPTWwakeUpOnUpdate)
	ToggleDisplay(ON)
EndIf

# ############################################################################
# set up for next notification
# kill any lingering notification
mort = SystemPath("ScriptExe") \ "MortScript.exe"
script = SystemPath("ScriptPath") \ SystemPath("ScriptName") & SystemPath("ScriptExt")
If (IPTWdelayHours <> 0 OR IPTWdelayMinutes <> 0)
	utime = TimeStamp() + (IPTWdelayHours * 60 + IPTWdelayMinutes) * 60
	# set notify for myself at next time
	RemoveNotifications(mort, """" & script & """") 
	RunAt(utime, mort, """" & script & """")
EndIf

# ############################################################################
# load data
If (IPTWpreventSleepOnUpdate)
	sleepOnUpdatePrevented = RegRead(IPTWregRoot, IPTWappRegKey, "sleepOnUpdatePrevented")
	If (sleepOnUpdatePrevented = 1)
		BattSuspendTimeout = RegRead(IPTWregRoot, IPTWappRegKey, "BattSuspendTimeout")
		ACSuspendTimeout = RegRead(IPTWregRoot, IPTWappRegKey, "ACSuspendTimeout")
	Else
		BattSuspendTimeout = RegRead("HKLM", "System\CurrentControlSet\Control\Power\Timeouts", "BattSuspendTimeout")
		ACSuspendTimeout = RegRead("HKLM", "System\CurrentControlSet\Control\Power\Timeouts", "ACSuspendTimeout")

		RegWriteDword(IPTWregRoot, IPTWappRegKey,"BattSuspendTimeout", BattSuspendTimeout)
		RegWriteDword(IPTWregRoot, IPTWappRegKey,"ACSuspendTimeout", ACSuspendTimeout)
	EndIf

	RegWriteDword("HKLM", "System\CurrentControlSet\Control\Power\Timeouts","BattSuspendTimeout", 0)
	RegWriteDword("HKLM", "System\CurrentControlSet\Control\Power\Timeouts","ACSuspendTimeout", 0)
	Call("IPTWtriggerPowerManagementChange")

	RegWriteDword(IPTWregRoot, IPTWappRegKey, "sleepOnUpdatePrevented", 1)
EndIf

didconnect = FALSE
If (NOT InternetConnected("http://www.perdu.com"))
	maxIPTWinternetConnectionIndex = MaxIndex(IPTWinternetConnectionList)
	internetConnectionIndex = 1
	While (NOT didconnect AND internetConnectionIndex <= maxIPTWinternetConnectionIndex)
		IPTWinternetConnection = IPTWinternetConnectionList[internetConnectionIndex]
		If (IPTWinternetConnection eq "RIL Map")
			countryCode = RunWait(SystemPath("ScriptPath") \ "RilCmdLine.exe","MobileCountryCode")
			lac = RunWait(SystemPath("ScriptPath") \ "RilCmdLine.exe","LocationAreaCode")
			cellID = RunWait(SystemPath("ScriptPath") \ "RilCmdLine.exe","CellID")
			fullLAC = countryCode & "-" & lac
			fullCellID = fullLAC & "-" & cellID
			currentFullCellIDmapping = IniRead(SystemPath("ScriptPath") \ "RILmap.ini", "RIL connection map", fullCellID)
			If (currentFullCellIDmapping eq "")
				currentFullLACmapping = IniRead(SystemPath("ScriptPath") \ "RILmap.ini", "RIL connection map", fullLAC)
				If (currentFullLACmapping eq "")
					currentCountryMapping = IniRead(SystemPath("ScriptPath") \ "RILmap.ini", "RIL connection map", countryCode)
					If (currentCountryMapping eq "")
						IPTWinternetConnection = ""
					Else
						IPTWinternetConnection = currentCountryMapping
					EndIf
				Else
					IPTWinternetConnection = currentFullLACmapping
				EndIf
			Else
				IPTWinternetConnection = currentFullCellIDmapping
			EndIf
		EndIf

		If (IPTWinternetConnection ne "")
			If (IPTWinternetConnection eq "VJVolubilis")
				If (FileExists(IPTWvjvolubilisPath))
					RunWait(IPTWvjvolubilisPath, "-gprson")
				EndIf
			ElseIf (IPTWinternetConnection eq "Wifi")
				RunWait(SystemPath("ScriptPath") \ "Wifi.exe")
			Else
				Connect(IPTWinternetConnection)
			EndIf

#Do we have a connection?
			nbSleeps = 0
			While (NOT RegRead("HKLM", "System\State\Connections", "Count") AND nbSleeps < 8)
				Sleep(2000)
				nbSleeps = nbSleeps + 1
			EndWhile

#Do we have a working connection?
			nbSleeps = 0
			While (NOT InternetConnected("http://www.perdu.com") AND nbSleeps < 5)
				Sleep(5000)
				nbSleeps = nbSleeps + 1
			EndWhile
			If (nbSleeps < 5)
				didconnect = TRUE
			ElseIf (IPTWinternetConnection eq "Wifi")
				RunWait(SystemPath("ScriptPath") \ "Wifi-OFF.exe")
			EndIf
		EndIf
		internetConnectionIndex = internetConnectionIndex + 1
	EndWhile
EndIf

dataUpdated = 0
Call("IPTWdownload", IPTWaccuWeatherLocation)

disconnectThenExit = 0
If (NOT FileExists(IPTWdataFile))
	iPhoneTodayPic = "AccuWeather." & IPTWiconsExtension
	CallScript("IPTWreloadIcon.mscr", IPTWcurrentWeatherPage, IPTWcurrentWeatherIcon, "N/A", iPhoneTodayPic)
	RegWriteDWord(IPTWregRoot, IPTWappRegKey, "Started", 0)
	CallScript("IPTWreloadS2U2.mscr", -1)
	disconnectThenExit = 1
EndIf

If (Find(data, "<failure>") > 0 OR Find(data, "<error>") > 0)
	iPhoneTodayPic = "AccuWeather." & IPTWiconsExtension
	CallScript("IPTWreloadIcon.mscr", IPTWcurrentWeatherPage, IPTWcurrentWeatherIcon, "Error", iPhoneTodayPic)
	RegWriteDWord(IPTWregRoot, IPTWappRegKey, "Started", 0)
	CallScript("IPTWreloadS2U2.mscr", -1)
	disconnectThenExit = 1
EndIf

If (dataUpdated AND NOT disconnectThenExit)
	Call("IPTWparse", IPTWaccuWeatherLocation)
EndIf

If (IPTWaccuWeatherLocationForecast eq "")
	#Update favorite locations data for all favorite locations marked with a *
	If (Find(IPTWaccuWeatherFavoriteLocations, "*") <> 0)
		locationsArray = Split(IPTWaccuWeatherFavoriteLocations, ";")
		ForEach IPTWaccuWeatherFavoriteLocation in array(locationsArray)
 				If (SubStr(IPTWaccuWeatherFavoriteLocation, 1, 1) eq "*" OR SubStr(IPTWaccuWeatherFavoriteLocation, 2, 1) eq "*")
				IPTWaccuWeatherFavoriteLocationCode = Part(IPTWaccuWeatherFavoriteLocation, ",", -1, TRUE)
				If (IPTWaccuWeatherFavoriteLocationCode ne IPTWaccuWeatherLocation)
					Call("IPTWdownload", IPTWaccuWeatherFavoriteLocationCode)
					If (Find(data, "<failure>") = 0 AND Find(data, "<error>") = 0)
						Call("IPTWparse", IPTWaccuWeatherFavoriteLocationCode)
					EndIf
				EndIf
			EndIf
		EndForEach
	EndIf
EndIf

If (IPTWdisconnectOnExit AND didconnect)
	If (IPTWinternetConnection eq "VJVolubilis")
		If (FileExists(IPTWvjvolubilisPath))
			Run(IPTWvjvolubilisPath, "-gprsoff")
		EndIf
	ElseIf (IPTWinternetConnection eq "Wifi")
		RunWait( SystemPath("ScriptPath") \ "Wifi-OFF.exe")
	Else
		CloseConnection
		Disconnect
	EndIf
EndIf

If (IPTWpreventSleepOnUpdate)
	RegWriteDword ("HKLM", "System\CurrentControlSet\Control\Power\Timeouts", "BattSuspendTimeout", BattSuspendTimeout)
	RegWriteDword ("HKLM", "System\CurrentControlSet\Control\Power\Timeouts", "ACSuspendTimeout", ACSuspendTimeout)
	Call("IPTWtriggerPowerManagementChange")

	RegWriteDword(IPTWregRoot, IPTWappRegKey, "sleepOnUpdatePrevented", 0)
EndIf

If (disconnectThenExit)
	Exit
EndIf

Call("IPTWsetCurrentTimeAndDate")

If (RegRead(IPTWregRoot, IPTWappRegKey, "Started"))
	Call("IPTWreloadData", SystemPath("ScriptPath"))
Else
	RegWriteDWord(IPTWregRoot, IPTWappRegKey, "Started", 1)
EndIf
