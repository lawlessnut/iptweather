ErrorLevel("off")

Include("IPTWsubs.mscr")

# ############################################################################
# retrieve user preference
IPTWaccuWeatherMetric		= IniRead("..\weather.ini", "User settings", "IPTWaccuWeatherMetric")
IPTWaccuWeatherLocation		= IniRead("..\weather.ini", "User settings", "IPTWaccuWeatherLocation")
IPTWdelayHours				= IniRead("..\weather.ini", "User settings", "IPTWdelayHours")
IPTWdelayMinutes			= IniRead("..\weather.ini", "User settings", "IPTWdelayMinutes")
IPTWmaxDownloadMinutes		= IniRead("..\weather.ini", "User settings", "IPTWmaxDownloadMinutes")
IPTWinternetConnection		= IniRead("..\weather.ini", "User settings", "IPTWinternetConnection")
IPTWdisconnectOnExit		= IniRead("..\weather.ini", "User settings", "IPTWdisconnectOnExit")
IPTWcurrentWeatherIcon		= IniRead("..\weather.ini", "User settings", "IPTWcurrentWeatherIcon")
IPTWcurrentWeatherPage		= IniRead("..\weather.ini", "User settings", "IPTWcurrentWeatherPage")
IPTWiconsExtension			= IniRead("..\weather.ini", "User settings", "IPTWiconsExtension")
IPTWobsoleteDataPrefix		= IniRead("..\weather.ini", "User settings", "IPTWobsoleteDataPrefix")
IPTWwakeUpOnUpdate			= IniRead("..\weather.ini", "User settings", "IPTWwakeUpOnUpdate")
IPTWpreventSleepOnUpdate	= IniRead("..\weather.ini", "User settings", "IPTWpreventSleepOnUpdate")
IPTWnightIconSuffix			= IniRead("..\weather.ini", "User settings", "IPTWnightIconSuffix")
IPTWgoogleUserID			= IniRead("..\weather.ini", "User settings", "IPTWgoogleUserID")
IPTWiPhoneTodayDisabled		= IniRead("..\weather.ini", "User settings", "IPTWiPhoneTodayDisabled")
IPTWlanguageFile			= IniRead("..\weather.ini", "User settings", "IPTWlanguageFile")
IPTWaccuWeatherIconPath		= IniRead("..\weather.ini", "User settings", "IPTWaccuWeatherIconPath")
IPTWaccuWeatherAPI		= IniRead("..\weather.ini", "User settings", "IPTWaccuWeatherAPI")
IPTWvjvolubilisPath		= IniRead("..\weather.ini", "User settings", "IPTWvjvolubilisPath")
IPTWwriteForecastInFile	= IniRead("..\weather.ini", "User settings", "IPTWwriteForecastInFile")

If (IPTWaccuWeatherAPI eq "")
	IPTWaccuWeatherAPI = "ruan"
EndIf

If (IPTWiPhoneTodayDisabled <> 1)
	If (NOT RegRead("HKLM", "Software\Microsoft\Today\Items\iPhoneToday", "Enabled") AND NOT ProcExists("iPhoneToday.exe") AND NOT ProcExists("iPhoneTodayDesktop.exe"))
		If (IPTWiPhoneTodayDisabled <> -1)
			IniWrite("..\weather.ini", "User settings", "IPTWiPhoneTodayDisabled", 1)
		EndIf
		IPTWiPhoneTodayDisabled = 1
	ElseIf (IPTWiPhoneTodayDisabled = -1)
		IPTWiPhoneTodayDisabled = 0
	EndIf
EndIf

If (IPTWaccuWeatherLocation ne "")
	weatherLocation = "location=" & IPTWaccuWeatherLocation
Else
	IPTWlocationLatitude = IniRead("..\weather.ini", "User settings", "IPTWlocationLatitude")
	IPTWlocationLongitude = IniRead("..\weather.ini", "User settings", "IPTWlocationLongitude")
	weatherLocation = "slat=" & IPTWlocationLatitude & "slon=" & IPTWlocationLongitude
EndIf

# ############################################################################
# configure location of parsed weather data in registry
IPTWregRoot				= IniRead("..\weather.ini", "Script settings", "IPTWregRoot")
IPTWappRegKey			= IniRead("..\weather.ini", "Script settings", "IPTWregKey")
IPTWregKey				= IniRead("..\weather.ini", "Script settings", "IPTWregKey") \ IPTWaccuWeatherLocation
IPTWdataFile			= SystemPath("ScriptPath") \ "data.xml"
IPTWaccuWeatherURL = "http://" & IPTWaccuWeatherAPI & ".accu-weather.com/widget/" & IPTWaccuWeatherAPI & "/weather-data.asp?"

# ############################################################################
# Set App-to-date version file path
versionFilePath = SystemPath("ScriptPath") \ "version.xml"
RegWriteString("HKCU", "Software\MoDaCo\AppToDate\XML", "IPTWeather", versionFilePath)

If (IPTWwakeUpOnUpdate)
	ToggleDisplay(ON)
EndIf

# ############################################################################
# set up for next notification
# kill any lingering notification
mort = SystemPath("ScriptExe") \ "MortScript.exe"
script = SystemPath("ScriptPath") \ SystemPath("ScriptName") & SystemPath("ScriptExt")
If (IPTWdelayHours <> 0 OR IPTWdelayMinutes <> 0)
	utime = TimeStamp() + (IPTWdelayHours * 60 + IPTWdelayMinutes) * 60
	# set notify for myself at next time
	RemoveNotifications(mort, """" & script & """") 
	RunAt(utime, mort, """" & script & """")
EndIf

killscript = SystemPath("ScriptPath") \ "killGetAccuWeather.mscr"
RemoveNotifications(mort, """" & killscript & """") 

# ############################################################################
# last data observation date and time
lastobsdate = RegRead(IPTWregRoot, IPTWregKey, "obsdate0")
lastobsdate = SubStr("0" & Part(lastobsdate, "/", 1), -2) & "/" & SubStr("0" & Part(lastobsdate, "/", 2), -2) & "/" & Part(lastobsdate, "/", 3)
lastobstime = RegRead(IPTWregRoot, IPTWregKey, "obstime")
lastlocation = RegRead(IPTWregRoot, IPTWappRegKey, "locationCode")

# ############################################################################
# load data
didconnect = FALSE
If (IPTWpreventSleepOnUpdate)
	sleepOnUpdatePrevented = RegRead(IPTWregRoot, IPTWappRegKey, "sleepOnUpdatePrevented")
	If (sleepOnUpdatePrevented = 1)
		BattSuspendTimeout = RegRead(IPTWregRoot, IPTWappRegKey, "BattSuspendTimeout")
		ACSuspendTimeout = RegRead(IPTWregRoot, IPTWappRegKey, "ACSuspendTimeout")
		BatteryTimeout = RegRead(IPTWregRoot, IPTWappRegKey, "BatteryTimeout")
		ACTimeout = RegRead(IPTWregRoot, IPTWappRegKey, "ACTimeout")
	Else
		BattSuspendTimeout = RegRead("HKLM", "System\CurrentControlSet\Control\Power\Timeouts", "BattSuspendTimeout")
		ACSuspendTimeout = RegRead("HKLM", "System\CurrentControlSet\Control\Power\Timeouts", "ACSuspendTimeout")
		BatteryTimeout = RegRead("HKCU", "ControlPanel\Backlight", "BatteryTimeout")
		ACTimeout = RegRead("HKCU", "ControlPanel\Backlight", "ACTimeout")

		RegWriteDword(IPTWregRoot, IPTWappRegKey,"BattSuspendTimeout", BattSuspendTimeout)
		RegWriteDword(IPTWregRoot, IPTWappRegKey, "BatteryTimeout", BatteryTimeout)
		RegWriteDword(IPTWregRoot, IPTWappRegKey,"ACSuspendTimeout", ACSuspendTimeout)
		RegWriteDword(IPTWregRoot, IPTWappRegKey, "ACTimeout", ACTimeout)
	EndIf

	RegWriteDword("HKLM", "System\CurrentControlSet\Control\Power\Timeouts","BattSuspendTimeout", 0)
	RegWriteDword("HKCU", "ControlPanel\Backlight", "BatteryTimeout", 0)
	RegWriteDword("HKLM", "System\CurrentControlSet\Control\Power\Timeouts","ACSuspendTimeout", 0)
	RegWriteDword("HKCU", "ControlPanel\Backlight", "ACTimeout", 0)

	RegWriteDword(IPTWregRoot, IPTWappRegKey, "sleepOnUpdatePrevented", 1)
EndIf

If (NOT InternetConnected("http://www.perdu.com"))
	If (IPTWinternetConnection eq "VJVolubilis")
		If (FileExists(IPTWvjvolubilisPath))
			RunWait(IPTWvjvolubilisPath, "-gprson")
			didconnect = TRUE
		EndIf
	Else
		Connect(IPTWinternetConnection)
		didconnect = TRUE
	EndIf
	nbSleeps = 0
	While(NOT InternetConnected("http://www.perdu.com") AND nbSleeps < 6)
		Sleep(5000)
		nbSleeps = nbSleeps + 1
	EndWhile
EndIf
dataUpdated = 0
If (InternetConnected("http://www.perdu.com"))
	If (IPTWaccuWeatherLocation eq "My Location")
#		locationData = ReadFile("http://www.maxmind.com/app/mylocation")
#		locBegin = Find(locationData, "Latitude/Longitude") + 57
#		locEnd = Find(locationData, "</td>", locBegin)
#		Split(SubStr(locationData, locBegin, locEnd - locBegin - 1), "/", 1, latitude, longitude)

		latitude = RegRead("HKLM", "Services\myLocation", "Latitude")
		longitude = RegRead("HKLM", "Services\myLocation", "Longitude")
		
		IPTWaccuWeatherURL = IPTWaccuWeatherURL & "slat=" & latitude & "&slon=" & longitude & "&metric=" & IPTWaccuWeatherMetric
	ElseIf (IPTWaccuWeatherLocation eq "Google Latitude" AND IPTWgoogleUserID ne "")
		locationData= ReadFile("http://www.google.com/latitude/apps/badge/api?user=" & IPTWgoogleUserID & "&type=json")
		locBegin = Find(locationData, "coordinates") + 15
		locEnd = Find(locationData, "]", locBegin)
		Split(SubStr(locationData, locBegin, locEnd - locBegin), ",", 1, longitude, latitude)

		IPTWaccuWeatherURL = IPTWaccuWeatherURL & "slat=" & latitude & "&slon=" & longitude & "&metric=" & IPTWaccuWeatherMetric
	Else
		IPTWaccuWeatherURL = IPTWaccuWeatherURL & weatherLocation & "&metric=" & IPTWaccuWeatherMetric
	EndIf

	utime = TimeStamp() + IPTWmaxDownloadMinutes * 60
	RunAt(utime, mort, """" & killscript & """")

	data = ReadFile(IPTWaccuWeatherURL)
	WriteFile(IPTWdataFile, data)
	dataUpdated = 1
EndIf

disconnectThenExit = 0
If (NOT FileExists(IPTWdataFile))
	iPhoneTodayPic = "AccuWeather." & IPTWiconsExtension
	CallScript("IPTWreloadIcon.mscr", IPTWcurrentWeatherPage, IPTWcurrentWeatherIcon, "N/A", iPhoneTodayPic)
	RegWriteDWord(IPTWregRoot, IPTWappRegKey, "Started", 0)
	CallScript("IPTWreloadS2U2.mscr", -1)
	disconnectThenExit = 1
EndIf

If (Find(data, "<failure>") > 0 OR Find(data, "<error>") > 0)
	iPhoneTodayPic = "AccuWeather." & IPTWiconsExtension
	CallScript("IPTWreloadIcon.mscr", IPTWcurrentWeatherPage, IPTWcurrentWeatherIcon, "Error", iPhoneTodayPic)
	RegWriteDWord(IPTWregRoot, IPTWappRegKey, "Started", 0)
	CallScript("IPTWreloadS2U2.mscr", -1)
	disconnectThenExit = 1
EndIf

If (dataUpdated AND NOT disconnectThenExit)
	If (Find(data,"</adc_database>") > 0)
		xmlConfigFileNumber=1
		While(Find(data, "day number=""" & xmlConfigFileNumber & """"))
			xmlConfigFileNumber = xmlConfigFileNumber + 1
		EndWhile
		xmlConfigFileNumber = xmlConfigFileNumber - 1
		If (xmlConfigFileNumber > 0 AND xmlConfigFileNumber < 8)
			IPTWxmlParserConfigFile = SystemPath("ScriptPath") \ "config" & xmlConfigFileNumber & ".xml"
			xmlParserConfigFile = ReadFile(IPTWxmlParserConfigFile)
			beginXMLPos = Find(xmlParserConfigFile, "<sourcefile>") + 12
			endXMLPos = Find(xmlParserConfigFile, "</sourcefile>", beginXMLPos)
			oldXMLFile = SubStr(xmlParserConfigFile, beginXMLPos, endXMLPos - beginXMLPos)
			If (IPTWdataFile ne oldXMLFile)
				xmlParserConfigFile = Replace(xmlParserConfigFile, oldXMLFile, IPTWdataFile)
				WriteFile(IPTWxmlParserConfigFile, xmlParserConfigFile)
			EndIf
# ############################################################################
# delete all old data from the registry
			ForEach value, data in regValues(IPTWregRoot, IPTWregKey)
				If (value ne "ACSuspendTimeout" \
					AND value ne "ACTimeout" \
					AND value ne "BatteryTimeout" \
					AND value ne "BattSuspendTimeout" \
					AND value ne "ShowingForecast" \
					AND value ne "sleepOnUpdatePrevented" \
					AND value ne "Started")
					If (RegValueExists(IPTWregRoot, IPTWappRegKey, value))
						RegDelete(IPTWregRoot, IPTWappRegKey, value)
					EndIf
					If (RegValueExists(IPTWregRoot, IPTWregKey, value))
						RegDelete(IPTWregRoot, IPTWregKey, value)
					EndIf
				EndIf
			EndForEach
			RunWait(SystemPath("ScriptPath") \ "xml2reg.exe", IPTWxmlParserConfigFile)
			RegWriteString(IPTWregRoot, IPTWregKey, "updateTime", TimeStamp())
		EndIf
	EndIf

# ############################################################################
# copy all data the location registry key
	ForEach value, data in regValues(IPTWregRoot, IPTWappRegKey)
		If (value ne "ACSuspendTimeout" \
			AND value ne "ACTimeout" \
			AND value ne "BatteryTimeout" \
			AND value ne "BattSuspendTimeout" \
			AND value ne "ShowingForecast" \
			AND value ne "sleepOnUpdatePrevented" \
			AND value ne "Started")
			 RegWriteString(IPTWregRoot, IPTWregKey, value, data)
		EndIf
	EndForEach

	url = RegRead(IPTWregRoot, IPTWregKey, "url")
	locationCodeBegin = ReverseFind(url, "=") + 1
	locationCode = SubStr(url, locationCodeBegin)
	RegWriteString(IPTWregRoot, IPTWregKey, "locationCode", locationCode)

	IPTWtranslationLanguageCode = IniRead("..\weather.ini", "User settings", "IPTWtranslationLanguageCode")
	If (IPTWtranslationLanguageCode ne "" AND Find(IPTWaccuWeatherLocation, "|") > 0)
		currentText = RegRead(IPTWregRoot, IPTWregKey, "text0")
		translatedCurrentText = IniRead(IPTWtranslationLanguageCode & ".ini", "Weather description translation", currentText)
		If (Length(translatedCurrentText) = 0)
			dataCTr = ReadFile("http://www.accuweather.com/" & IPTWtranslationLanguageCode & "/" & Replace(IPTWaccuWeatherLocation, "|", "/") & "/Quick-Look.aspx")
			beginDesc = Find(dataCTr, "ctl00_cphContent_lblCurrentText") + 92
			If (beginDesc > 92)
				endDesc = Find(dataCTr, "</span>", beginDesc)
				translatedCurrentText = SubStr(dataCTr, beginDesc, endDesc - beginDesc)
				IniWrite(IPTWtranslationLanguageCode & ".ini", "Weather description translation", currentText, translatedCurrentText)
			EndIf
		EndIf

		i = 0
		time = Array("D", "N")
#		timeTxt = Array("", "N")
		timeTxt = Array("Day", "Night")
		While (RegValueExists(IPTWregRoot, IPTWregKey, "textD" & i))
			For j = 1 to 2
				If (RegValueExists(IPTWregRoot, IPTWregKey, "text" & time[j] & i))
					forecastText = RegRead(IPTWregRoot, IPTWregKey, "text" & time[j] & i)
					translatedForecastText = IniRead(IPTWtranslationLanguageCode & ".ini", "Weather description translation", forecastText)
					If (Length(translatedForecasttext) = 0)
						If (dataFTr eq "")
							dataFTr = ReadFile("http://www.accuweather.com/" & IPTWtranslationLanguageCode & "/" & Replace(IPTWaccuWeatherLocation, "|", "/") & "/forecast.aspx")
						EndIf
#						searchString = "ctl00_cphContent_rptFC_ctl0" & i & "_lblDesc" & timeTxt[j]
						searchString = "ctl00_cphContent_repForecast" & timeTxt[j] &"_ctl0" & i & "_lblDesc"">"
						beginDesc = Find(dataFTr, searchString) + Length(searchString)
						If (beginDesc > Length(searchString))
							endDesc = Find(dataFTr, "</span>", beginDesc)
							translatedForecastText = SubStr(dataFTr, beginDesc, endDesc - beginDesc)
							IniWrite(IPTWtranslationLanguageCode & ".ini", "Weather description translation", forecastText, translatedForecastText)
						EndIf
					EndIf
				EndIf
			Next
			i = i + 1
		EndWhile
	EndIf
EndIf

RemoveNotifications(mort, """" & killscript & """") 

If (IPTWdisconnectOnExit AND didconnect)
	If (IPTWinternetConnection eq "VJVolubilis")
		If (FileExists(IPTWvjvolubilisPath))
			Run(IPTWvjvolubilisPath, "-gprsoff")
		EndIf
	Else
		CloseConnection
		Disconnect
	EndIf
EndIf

If (IPTWpreventSleepOnUpdate)
	RegWriteDword ("HKLM", "System\CurrentControlSet\Control\Power\Timeouts", "BattSuspendTimeout", BattSuspendTimeout)
	RegWriteDword ("HKLM", "System\CurrentControlSet\Control\Power\Timeouts", "ACSuspendTimeout", ACSuspendTimeout)
	RegWriteDword ("HKCU", "ControlPanel\Backlight", "BatteryTimeout", BatteryTimeout)
	RegWriteDword ("HKCU", "ControlPanel\Backlight", "ACTimeout", ACTimeout)

	RegWriteDword(IPTWregRoot, IPTWappRegKey, "sleepOnUpdatePrevented", 0)
EndIf

If (disconnectThenExit)
	Exit
EndIf

# ############################################################################
# new data observation date and time
newobsdate = RegRead(IPTWregRoot, IPTWregKey, "obsdate0")
newobsdate = SubStr("0" & Part(newobsdate, "/", 1), -2) & "/" & SubStr("0" & Part(newobsdate, "/", 2), -2) & "/" & Part(newobsdate, "/", 3)
newobstime = RegRead(IPTWregRoot, IPTWregKey, "obstime")
newlocation = RegRead(IPTWregRoot, IPTWregKey, "locationCode")

# ############################################################################
# is the first run of getAccuWeather after phone starts
isStarted = RegRead(IPTWregRoot, IPTWappRegKey, "Started")

Call("IPTWsetCurrentTimeAndDate")

# new not obsolete data, so update
If (isStarted = 0 OR ((newobsdate eq currentDate) AND ((lastlocation ne newlocation) OR (lastobsdate ne newobsdate) OR (lastobstime ne newobstime))))
	Call("IPTWreloadData", 0, "")
Else
# If change of day, we retrieve previous night forecast as current condition
	If (newobsdate ne currentDate)
		Call("IPTWreloadData", 1, "")
	EndIf
EndIf

RegWriteDWord(IPTWregRoot, IPTWappRegKey, "Started", 1)

Call("waitForReadyIPT", 2)
