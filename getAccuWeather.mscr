#ErrorLevel("off")

# ############################################################################
# retrieve user preference
IPTWaccuWeatherMetric    = IniRead("weather.ini", "User settings", "IPTWaccuWeatherMetric")
IPTWaccuWeatherLocation  = IniRead("weather.ini", "User settings", "IPTWaccuWeatherLocation")
IPTWdelayHours           = IniRead("weather.ini", "User settings", "IPTWdelayHours")
IPTWdelayMinutes         = IniRead("weather.ini", "User settings", "IPTWdelayMinutes")
IPTWinternetConnection   = IniRead("weather.ini", "User settings", "IPTWinternetConnection")
IPTWdisconnectOnExit     = IniRead("weather.ini", "User settings", "IPTWdisconnectOnExit")
IPTWcurrentWeatherIcon   = IniRead("weather.ini", "User settings", "IPTWcurrentWeatherIcon")
IPTWcurrentWeatherPage   = IniRead("weather.ini", "User settings", "IPTWcurrentWeatherPage")
IPTWiconsExtension       = IniRead("weather.ini", "User settings", "IPTWiconsExtension")
IPTWobsoleteDataPrefix   = IniRead("weather.ini", "User settings", "IPTWobsoleteDataPrefix")
IPTWwakeUpOnUpdate       = IniRead("weather.ini", "User settings", "IPTWwakeUpOnUpdate")
IPTWpreventSleepOnUpdate = IniRead("weather.ini", "User settings", "IPTWpreventSleepOnUpdate")
IPTWnightIconSuffix      = IniRead("weather.ini", "User settings", "IPTWnightIconSuffix")

If (IPTWaccuWeatherLocation ne "")
  weatherLocation = "location=" & IPTWaccuWeatherLocation
Else
  IPTWlocationLatitude = IniRead("weather.ini", "User settings", "IPTWlocationLatitude")
  IPTWlocationLongitude = IniRead("weather.ini", "User settings", "IPTWlocationLongitude")
  weatherLocation = "slat=" & IPTWlocationLatitude & "slon=" & IPTWlocationLongitude
EndIf

# ############################################################################
# configure location of parsed weather data in registry
IPTWregRoot              = IniRead("weather.ini", "Script settings", "IPTWregRoot")
IPTWregKey               = IniRead("weather.ini", "Script settings", "IPTWregKey")
IPTWdataFile             = SystemPath("ScriptPath") \ "data.xml"
IPTWparserPath           = SystemPath("ScriptPath")
IPTWxmlParserConfigFile  = SystemPath("ScriptPath") \ "config.xml"
IPTWaccuWeatherIconPath  = SystemPath("ScriptPath") \ "accuweathericons"

If (IPTWwakeUpOnUpdate)
  ToggleDisplay(ON)
EndIf

# ############################################################################
# set up for next notification
currentDate = FormatTime("m/d/Y")
# kill any lingering notification
mort = SystemPath("ScriptExe") \ "MortScript.exe"
script = SystemPath("ScriptPath") \ SystemPath("ScriptName") & SystemPath("ScriptExt")
RemoveNotifications(mort, script) 
If (IPTWdelayHours <> 0 OR IPTWdelayMinutes <> 0)
  utime = TimeStamp() + (IPTWdelayHours * 60 + IPTWdelayMinutes) * 60
  # set notify for myself at next time
  RunAt(utime, mort, script)
EndIf

# ############################################################################
# last data observation date and time
lastobsdate = RegRead(IPTWregRoot, IPTWregKey, "obsdate0")
lastobsdate = SubStr("0" & Part(lastobsdate, "/", 1), -2) & "/" & SubStr("0" & Part(lastobsdate, "/", 2), -2) & "/" & Part(lastobsdate, "/", 3)
lastobstime = RegRead(IPTWregRoot, IPTWregKey, "obstime")

# ############################################################################
# load data
didconnect = FALSE
If (IPTWpreventSleepOnUpdate)
  sleepOnUpdatePrevented = RegRead(IPTWregRoot, IPTWregKey, "sleepOnUpdatePrevented")
  If (sleepOnUpdatePrevented = 1)
    BattSuspendTimeout = RegRead(IPTWregRoot, IPTWregKey, "BattSuspendTimeout")
    ACSuspendTimeout = RegRead(IPTWregRoot, IPTWregKey, "ACSuspendTimeout")
    BatteryTimeout = RegRead(IPTWregRoot, IPTWregKey, "BatteryTimeout")
    ACTimeout = RegRead(IPTWregRoot, IPTWregKey, "ACTimeout")
  Else
    BattSuspendTimeout = RegRead("HKLM", "System\CurrentControlSet\Control\Power\Timeouts", "BattSuspendTimeout")
    ACSuspendTimeout = RegRead("HKLM", "System\CurrentControlSet\Control\Power\Timeouts", "ACSuspendTimeout")
    BatteryTimeout = RegRead("HKCU", "ControlPanel\Backlight", "BatteryTimeout")
    ACTimeout = RegRead("HKCU", "ControlPanel\Backlight", "ACTimeout")

    RegWriteDword(IPTWregRoot, IPTWregKey,"BattSuspendTimeout", BattSuspendTimeout)
    RegWriteDword(IPTWregRoot, IPTWregKey, "BatteryTimeout", BatteryTimeout)
    RegWriteDword(IPTWregRoot, IPTWregKey,"ACSuspendTimeout", ACSuspendTimeout)
    RegWriteDword(IPTWregRoot, IPTWregKey, "ACTimeout", ACTimeout)
  EndIf

  RegWriteDword("HKLM", "System\CurrentControlSet\Control\Power\Timeouts","BattSuspendTimeout", 0)
  RegWriteDword("HKCU", "ControlPanel\Backlight", "BatteryTimeout", 0)
  RegWriteDword("HKLM", "System\CurrentControlSet\Control\Power\Timeouts","ACSuspendTimeout", 0)
  RegWriteDword("HKCU", "ControlPanel\Backlight", "ACTimeout", 0)

  RegWriteDword(IPTWregRoot, IPTWregKey, "sleepOnUpdatePrevented", 1)
EndIf

If (NOT InternetConnected("http://www.perdu.com"))
  Connect(IPTWinternetConnection)
  didconnect = TRUE
  nbSleeps = 0
  While(NOT InternetConnected("http://www.perdu.com") AND nbSleeps < 6)
    Sleep(5000)
    nbSleeps = nbSleeps + 1
  EndWhile
EndIf
If (InternetConnected("http://www.perdu.com"))
  If (IPTWaccuWeatherLocation eq "My Location")
#    ipData = ReadFile("http://www.monadresseip.fr/")
#    ipBegin = Find(ipData, "ip=") + 3
#    ipEnd = Find(ipData, "'>", ipBegin)
#    ip = Replace(SubStr(ipData, ipBegin, ipEnd - ipBegin), " ", "")

#    locationData = ReadFile("http://www.ipgetinfo.com/?mode=ip&lang=fr&ip=" & ip)
#    latitudeBegin = Find(locationData, "latitude</b>: ") + 14
#    latitudeEnd = Find(locationData, "<br", latitudeBegin)
#    latitude = SubStr(locationData, latitudeBegin, latitudeEnd - latitudeBegin)
 
#    longitudeBegin = Find(locationData, "longitude</b>: ") + 14
#    longitudeEnd = Find(locationData, "<br", longitudeBegin)
#    longitude = SubStr(locationData, longitudeBegin, longitudeEnd - longitudeBegin)

    locationData = ReadFile("http://www.maxmind.com/app/mylocation")
    locBegin = Find(locationData, "Latitude/Longitude") + 57
    locEnd = Find(locationData, "</td>", locBegin)
    Split(SubStr(locationData, locBegin, locEnd - locBegin - 1), "/", 1, latitude, longitude)

    IPTWaccuWeatherURL = "http://rainmeter.accu-weather.com/widget/rainmeter/weather-data.asp?slat=" & latitude & "&slon=" & longitude & "&metric=" & IPTWaccuWeatherMetric
  Else
    IPTWaccuWeatherURL = "http://rainmeter.accu-weather.com/widget/rainmeter/weather-data.asp?" & weatherLocation & "&metric=" & IPTWaccuWeatherMetric
  EndIf
  data = ReadFile(IPTWaccuWeatherURL)
  WriteFile(IPTWdataFile, data)
EndIf

If (IPTWdisconnectOnExit AND didconnect)
  CloseConnection
  Disconnect
EndIf

If (IPTWpreventSleepOnUpdate)
  RegWriteDword ("HKLM", "System\CurrentControlSet\Control\Power\Timeouts", "BattSuspendTimeout", BattSuspendTimeout)
  RegWriteDword ("HKLM", "System\CurrentControlSet\Control\Power\Timeouts", "ACSuspendTimeout", ACSuspendTimeout)
  RegWriteDword ("HKCU", "ControlPanel\Backlight", "BatteryTimeout", BatteryTimeout)
  RegWriteDword ("HKCU", "ControlPanel\Backlight", "ACTimeout", ACTimeout)

  RegWriteDword(IPTWregRoot, IPTWregKey, "sleepOnUpdatePrevented", 0)
EndIf

If (NOT FileExists(IPTWdataFile))
  iPhoneTodayPic = "AccuWeather." & IPTWiconsExtension
  iPhoneTodayTemp = "N/A"
  Call("IPTWreloadIcon", IPTWcurrentWeatherPage, IPTWcurrentWeatherIcon, iPhoneTodayTemp, iPhoneTodayPic)
  RegWriteDWord(IPTWregRoot, IPTWregKey, "Started", 0)
  Call("IPTWreloadS2U2", -1)
  Exit
EndIf

RunWait(IPTWparserPath \ "xml2reg.exe", IPTWxmlParserConfigFile)

url = RegRead(IPTWregRoot, IPTWregKey, "url")
locationCodeBegin = ReverseFind(url, "=") + 1
RegWriteString(IPTWregRoot, IPTWregKey, "locationCode", SubStr(url, locationCodeBegin))

# ############################################################################
# new data observation date and time
newobsdate = RegRead(IPTWregRoot, IPTWregKey, "obsdate0")
newobsdate = SubStr("0" & Part(newobsdate, "/", 1), -2) & "/" & SubStr("0" & Part(newobsdate, "/", 2), -2) & "/" & Part(newobsdate, "/", 3)
newobstime = RegRead(IPTWregRoot, IPTWregKey, "obstime")

# ############################################################################
# is the first run of getAccuWeather after phone starts
isStarted = RegRead(IPTWregRoot, IPTWregKey, "Started")

# new not obsolete data, so update
If (isStarted = 0 OR ((newobsdate eq currentDate) AND ((lastobsdate ne newobsdate) OR (lastobstime ne newobstime))))
  isDaylight = RegRead(IPTWregRoot, IPTWregKey, "isDaylight")
  If (isDaylight eq "False")
    iconSuffix = IPTWnightIconSuffix
  Else
    iconSuffix = ""
  EndIf
  iPhoneTodayPic = RegRead(IPTWregRoot, IPTWregKey, "icon0") & iconSuffix & "." & IPTWiconsExtension
  iPhoneTodayTemp = RegRead(IPTWregRoot, IPTWregKey, "temp0") & " (" & RegRead(IPTWregRoot, IPTWregKey, "tempfeel0") & ")"
  Call("IPTWreloadS2U2", 1)
  Call("IPTWreloadIcon", IPTWcurrentWeatherPage, IPTWcurrentWeatherIcon, iPhoneTodayTemp, iPhoneTodayPic)
# no new data?
Else
# If change of day, we retrieve previous night forecast as current condition
  If (newobsdate ne currentDate)
    currenttime = Replace(FormatTime("A h:i", TimeStamp()), " 12", " 00")
    daysToSkip = 1
    foundDay = FALSE
    While (NOT foundDay AND RegValueExists(IPTWregRoot, IPTWregKey, "obsdate" & daysToSkip))
      obsdate = RegRead(IPTWregRoot, IPTWregKey, "obsdate" & daysToSkip)
      obsdate = SubStr("0" & Part(obsdate, "/", 1), -2) & "/" & SubStr("0" & Part(obsdate, "/", 2), -2) & "/" & Part(obsdate, "/", 3)
      If (obsdate eq currentDate)
        foundDay = TRUE
      Else
        daysToSkip = daysToSkip + 1
      EndIf
    EndWhile
    If (foundDay)
      sunset = SubStr("0" & RegRead(IPTWregRoot, IPTWregKey, "sunset" & daysToSkip), -8)
      sunset = Replace(Part(sunset, " ", 2) & " " & Part(sunset, " ", 1), " 12", " 00")
      If (currenttime gt sunset)
        iPhoneTodayPic = RegRead(IPTWregRoot, IPTWregKey, "iconN" & daysToSkip) & IPTWnightIconSuffix & "." & IPTWiconsExtension
        iPhoneTodayTemp = IPTWobsoleteDataPrefix & RegRead(IPTWregRoot, IPTWregKey, "loTemp" & daysToSkip) & " (" & RegRead(IPTWregRoot, IPTWregKey, "loFeelTemp" & daysToSkip) & ")"
        Call("IPTWreloadS2U2", daysToSkip + 1)
        Call("IPTWreloadIcon", IPTWcurrentWeatherPage, IPTWcurrentWeatherIcon, iPhoneTodayTemp, iPhoneTodayPic)
      Else
        sunrise = SubStr("0" & RegRead(IPTWregRoot, IPTWregKey, "sunrise" & daysToSkip), -8)
        sunrise = Replace(Part(sunrise, " ", 2) & " " & Part(sunrise, " ", 1), " 12", " 00")
        If (currenttime lt sunrise)
          daysToSkip = daysToSkip - 1
          iPhoneTodayPic = RegRead(IPTWregRoot, IPTWregKey, "iconN" & daysToSkip) & IPTWnightIconSuffix & "." & IPTWiconsExtension
          iPhoneTodayTemp = IPTWobsoleteDataPrefix & RegRead(IPTWregRoot, IPTWregKey, "loTemp" & daysToSkip) & " (" & RegRead(IPTWregRoot, IPTWregKey, "loFeelTemp" & daysToSkip) & ")"
          Call("IPTWreloadS2U2", daysToSkip + 1)
          Call("IPTWreloadIcon", IPTWcurrentWeatherPage, IPTWcurrentWeatherIcon, iPhoneTodayTemp, iPhoneTodayPic)
        Else
          iPhoneTodayPic = RegRead(IPTWregRoot, IPTWregKey, "iconD" & daysToSkip) & "." & IPTWiconsExtension
          iPhoneTodayTemp = IPTWobsoleteDataPrefix & RegRead(IPTWregRoot, IPTWregKey, "hiTemp" & daysToSkip) & " (" & RegRead(IPTWregRoot, IPTWregKey, "hiFeelTemp" & daysToSkip) & ")"
          Call("IPTWreloadS2U2", daysToSkip + 1)
          Call("IPTWreloadIcon", IPTWcurrentWeatherPage, IPTWcurrentWeatherIcon, iPhoneTodayTemp, iPhoneTodayPic)
        EndIf
      EndIf
    Else
      iPhoneTodayPic = "AccuWeather"
      iPhoneTodayTemp = "N/A"
      Call("IPTWreloadS2U2", -1)
      Call("IPTWreloadIcon", IPTWcurrentWeatherPage, IPTWcurrentWeatherIcon, iPhoneTodayTemp, iPhoneTodayPic, IPTWiconsExtension)
    EndIf
  EndIf
EndIf

RegWriteDWord(IPTWregRoot, IPTWregKey, "Started", 1)

# ############################################################################
# Quit only when iPhoneToday has finished working
While(RegRead("HKLM", "\Software\iPhonetoday", "reloadIcon") AND RegKeyExists("HKLM", "\Software\iPhonetoday\icon0"))
  Sleep(1000)
EndWhile
Sleep(1000)

Sub IPTWreloadIcon

  RegWriteDWord("HKLM", "\Software\iPhonetoday\icon0", "nScreen", argv[1])
  RegWriteDWord("HKLM", "\Software\iPhonetoday\icon0", "nIcon", argv[2])
  RegWriteString("HKLM", "\Software\iPhonetoday\icon0", "strName", argv[3])
  RegWriteString("HKLM", "\Software\iPhonetoday\icon0", "strImage", IPTWaccuWeatherIconPath \ argv[4])
  RegWriteDWord("HKLM", "\Software\iPhonetoday", "reloadIcon", 1)

EndSub

Sub IPTWreloadS2U2

  reloadS2U2 = FALSE
  IPTWS2U2Path = IniRead("weather.ini", "S2U2 settings", "IPTWS2U2Path")
  If (argv[1] < 0)
    IPTWtomorrowForecastInS2U2UserWeather = IniRead("weather.ini", "S2U2 settings", "IPTWtomorrowForecastInS2U2UserWeather")
    If (IPTWtomorrowForecastInS2U2UserWeather)
      oldS2U2weather = RegRead("HKCU", "\Software\A_C\S2U2\", "UserWeather")
      newS2U2weather = "C|10000|N/A"
      If (oldS2U2weather ne newS2U2weather)
        RegWriteString("HKCU", "\Software\A_C\S2U2\", "UserWeather", newS2U2weather)
        reloadS2U2 = TRUE
      EndIf
    EndIf

    IPTWtodayForecastInS2U2Text = IniRead("weather.ini", "S2U2 settings", "IPTWtodayForecastInS2U2Text")
    If (IPTWtodayForecastInS2U2Text)
      newS2U2text = IniRead("weather.ini", "S2U2 settings", "IPTWdefaultS2U2Text")
      oldS2U2text = IniRead(IPTWS2U2Path & "lang.ini", "", "s_S2UText")

      If (oldS2U2text ne newS2U2text)
        S2U2setFile = ReadFile(IPTWS2U2Path & "lang.ini", 0, "unicode")
        S2U2setFile = Replace(S2U2setFile, "s_S2UText=" & oldS2U2text, "s_S2UText=" & newS2U2text)
        WriteFile(IPTWS2U2Path & "lang.ini", S2U2setFile, FALSE, "unicode")
        reloadS2U2 = TRUE
      EndIf
    EndIf

    IPTWtodayForecastInS2U2Wallpaper = IniRead("weather.ini", "S2U2 settings", "IPTWtodayForecastInS2U2Wallpaper")
    IPTWuseS2U2wallpaperForBackground = IniRead("weather.ini", "User settings", "IPTWuseS2U2wallpaperForBackground")
    If (IPTWtodayForecastInS2U2Wallpaper OR IPTWuseS2U2wallpaperForBackground)
      IPTWS2U2WallpaperExtension = IniRead("weather.ini", "S2U2 settings", "IPTWS2U2WallpaperExtension")
      IPTWS2U2WallpaperPath = IniRead("weather.ini", "S2U2 settings", "IPTWS2U2WallpaperPath")
      wallpaper = IPTWS2U2WallpaperPath \ IniRead("weather.ini", "S2U2 settings", "IPTWdefautS2U2Wallpaper") & "." & IPTWS2U2WallpaperExtension

      If (IPTWtodayForecastInS2U2Wallpaper)
        RegWriteString("HKCU", "\Software\A_C\S2U2\", "Wallpaper", wallpaper)
      EndIf

      If (IPTWuseS2U2wallpaperForBackground)
        IPTsettings = ReadFile("\iPhoneToday\settings.xml")
        wallpaperStartPos = Find(IPTsettings, "<wallpaper>") + 11
        wallpaperEndPos = Find(IPTsettings, "</wallpaper>", wallpaperStartPos)
        If (wallpaperStartPos = wallpaperEndPos)
          oldwallpaper = ""
        Else
          oldwallpaper = SubStr(IPTsettings, wallpaperStartPos, wallpaperEndPos - wallpaperStartPos)
        EndIf
        IPTsettings = Replace(IPTsettings, "<wallpaper>" & oldwallpaper & "</wallpaper>", "<wallpaper>" & wallpaper & "</wallpaper>")
        IPTsettings = Replace(IPTsettings, "<staticWallpaper>0</staticWallpaper>", "<staticWallpaper>1</staticWallpaper>")
        IPTsettings = Replace(IPTsettings, "<backTransparent>1</backTransparent>", "<backTransparent>0</backTransparent>")
        WriteFile("\iPhoneToday\settings.xml", IPTsettings, FALSE)
        If (IniRead("weather.ini", "User settings", "IPTWuseExeIPhoneToday"))
          Kill("iPhoneToday.exe")
          Run("\iPhoneToday\iPhoneToday.exe")
        Else
          RedrawToday
        EndIf
        Sleep(1000)
      EndIf
    EndIf
  Else
    IPTWtomorrowForecastInS2U2UserWeather = IniRead("weather.ini", "S2U2 settings", "IPTWtomorrowForecastInS2U2UserWeather")
    If (IPTWtomorrowForecastInS2U2UserWeather)
      oldS2U2weather = RegRead("HKCU", "\Software\A_C\S2U2\", "UserWeather")
      S2U2Pic = RegRead(IPTWregRoot, IPTWregKey, "iconD" & argv[1])
      S2U2Text = RegRead(IPTWregRoot, IPTWregKey, "hiTemp" & argv[1]) & "(" & RegRead(IPTWregRoot, IPTWregKey, "hiFeelTemp" & argv[1]) & ") / " & RegRead(IPTWregRoot, IPTWregKey, "loTemp" & argv[1]) & "(" & RegRead(IPTWregRoot, IPTWregKey, "loFeelTemp" & argv[1]) & ")"
      newS2U2weather = "C|" & S2U2Pic & "|" & S2U2Text
      If (oldS2U2weather ne newS2U2weather)
        RegWriteString("HKCU", "\Software\A_C\S2U2\", "UserWeather", newS2U2weather)
        reloadS2U2 = TRUE
      EndIf
    EndIf

    IPTWtodayForecastInS2U2Text = IniRead("weather.ini", "S2U2 settings", "IPTWtodayForecastInS2U2Text")
    IPTWtodayForecastInS2U2Wallpaper = IniRead("weather.ini", "S2U2 settings", "IPTWtodayForecastInS2U2Wallpaper")
    IPTWuseS2U2wallpaperForBackground = IniRead("weather.ini", "User settings", "IPTWuseS2U2wallpaperForBackground")
    If (IPTWtodayForecastInS2U2Text OR IPTWtodayForecastInS2U2Wallpaper OR IPTWuseS2U2wallpaperForBackground)
      currenttime = Replace(FormatTime("A h:i", TimeStamp()), " 12", " 00")
      sunset = SubStr("0" & RegRead(IPTWregRoot, IPTWregKey, "sunset" & (argv[1] - 1)), -8)
      sunset = Replace(Part(sunset, " ", 2) & " " & Part(sunset, " ", 1), " 12", " 00")
      iconNum = argv[1] - 1
      If (currenttime gt sunset)
        suffix = "N"
      Else
        suffix = "D"
      EndIf

      If (IPTWtodayForecastInS2U2Text)
        oldS2U2text = IniRead(IPTWS2U2Path & "lang.ini", "", "s_S2UText")
        weatherText = RegRead(IPTWregRoot, IPTWregKey, "text" & suffix & iconNum)
        newS2U2text = IniRead("weather.ini", "Weather description translation", weatherText)
        If (Length(newS2U2text) = 0)
          newS2U2text = weatherText
          If (Length(newS2U2text) > 19)
            newS2U2text = Replace(newS2U2text, " and ", " & ")
            If (Length(newS2U2text) > 19)
              newS2U2text = Replace(newS2U2text, " with ", " w/ ")
            EndIf
          EndIf
          IniWrite("weather.ini", "Weather description translation", weatherText, newS2U2text)
        EndIf

        If (oldS2U2text ne newS2U2text)
          S2U2setFile = ReadFile(IPTWS2U2Path & "lang.ini", 0, "unicode")
          S2U2setFile = Replace(S2U2setFile, "s_S2UText=" & oldS2U2text, "s_S2UText=" & newS2U2text)
          WriteFile(IPTWS2U2Path & "lang.ini", S2U2setFile, FALSE, "unicode")
          reloadS2U2 = TRUE
        EndIf
      EndIf

      If (IPTWtodayForecastInS2U2Wallpaper OR IPTWuseS2U2wallpaperForBackground)
        IPTWS2U2WallpaperExtension = IniRead("weather.ini", "S2U2 settings", "IPTWS2U2WallpaperExtension")
        IPTWS2U2WallpaperPath = IniRead("weather.ini", "S2U2 settings", "IPTWS2U2WallpaperPath")
        wallpaper = IPTWS2U2WallpaperPath \ Eval(RegRead(IPTWregRoot, IPTWregKey, "icon" & suffix & iconNum)) & "." & IPTWS2U2WallpaperExtension

        If (IPTWtodayForecastInS2U2Wallpaper)
          RegWriteString("HKCU", "\Software\A_C\S2U2\", "Wallpaper", wallpaper)
        EndIf

        If (IPTWuseS2U2wallpaperForBackground)
          IPTsettings = ReadFile("\iPhoneToday\settings.xml")
          wallpaperStartPos = Find(IPTsettings, "<wallpaper>") + 11
          wallpaperEndPos = Find(IPTsettings, "</wallpaper>", wallpaperStartPos)
          If (wallpaperStartPos = wallpaperEndPos)
            oldwallpaper = ""
          Else
            oldwallpaper = SubStr(IPTsettings, wallpaperStartPos, wallpaperEndPos - wallpaperStartPos)
          EndIf
          IPTsettings = Replace(IPTsettings, "<wallpaper>" & oldwallpaper & "</wallpaper>", "<wallpaper>" & wallpaper & "</wallpaper>")
          IPTsettings = Replace(IPTsettings, "<staticWallpaper>0</staticWallpaper>", "<staticWallpaper>1</staticWallpaper>")
          IPTsettings = Replace(IPTsettings, "<backTransparent>1</backTransparent>", "<backTransparent>0</backTransparent>")
          WriteFile("\iPhoneToday\settings.xml", IPTsettings, FALSE)
          If (IniRead("weather.ini", "User settings", "IPTWuseExeIPhoneToday"))
            Kill("iPhoneToday.exe")
            Run("\iPhoneToday\iPhoneToday.exe")
          Else
            RedrawToday
          EndIf
          Sleep(1000)
        EndIf
      EndIf
    EndIf
  EndIf

  If (reloadS2U2)
    If (WndActive("S2U2") = True)
      Run(IPTWS2U2Path & "iLock2.exe", "-nomsg")
      Sleep(1000)
      Run(IPTWS2U2Path & "s2u2.exe")
    Else
      Run(IPTWS2U2Path & "iLock2.exe", "-nomsg")
      Sleep(2000)
      Run(IPTWS2U2Path & "iLock2.exe")
    Endif
  EndIf

EndSub