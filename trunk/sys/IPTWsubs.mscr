Sub IPTWdownload
	If (InternetConnected("http://www.perdu.com"))
		IPTWcurrentAccuWeatherLocation = argv[1]
		If (IPTWcurrentAccuWeatherLocation eq "My Location")
			latitude = RegRead("HKLM", "Services\myLocation", "Latitude")
			longitude = RegRead("HKLM", "Services\myLocation", "Longitude")
		
			IPTWaccuWeatherRequestURL = IPTWaccuWeatherURL & "slat=" & latitude & "&slon=" & longitude
		ElseIf (IPTWcurrentAccuWeatherLocation eq "Google Latitude" AND IPTWgoogleUserID ne "")
			locationData= ReadFile("http://www.google.com/latitude/apps/badge/api?user=" & IPTWgoogleUserID & "&type=json")
			locBegin = Find(locationData, "coordinates") + 15
			locEnd = Find(locationData, "]", locBegin)
			Split(SubStr(locationData, locBegin, locEnd - locBegin), ",", 1, longitude, latitude)

			IPTWaccuWeatherRequestURL = IPTWaccuWeatherURL & "slat=" & latitude & "&slon=" & longitude
		Else
			If (IPTWcurrentAccuWeatherLocation ne "")
				weatherLocation = "location=" & IPTWcurrentAccuWeatherLocation
			Else
				IPTWlocationLatitude = IniRead("..\weather.ini", "General settings", "IPTWlocationLatitude")
				IPTWlocationLongitude = IniRead("..\weather.ini", "General settings", "IPTWlocationLongitude")
				weatherLocation = "slat=" & IPTWlocationLatitude & "slon=" & IPTWlocationLongitude
			EndIf
			IPTWaccuWeatherRequestURL = IPTWaccuWeatherURL & weatherLocation
		EndIf

		data = ReadFile(IPTWaccuWeatherRequestURL)
		WriteFile(IPTWdataFile, data)

		If (IPTWcurrentAccuWeatherLocation eq IPTWaccuWeatherLocation)
			dataUpdated = 1
		EndIf
	EndIf
EndSub

Sub IPTWparse
	If (Find(data,"</adc_database>") > 0)
		xmlConfigFileNumber=1
		While(Find(data, "day number=""" & xmlConfigFileNumber & """"))
			xmlConfigFileNumber += 1
		EndWhile
		xmlConfigFileNumber = xmlConfigFileNumber - 1
		If (xmlConfigFileNumber > 0 AND xmlConfigFileNumber < 8)
			IPTWxmlParserConfigFile = SystemPath("ScriptPath") \ "config" & xmlConfigFileNumber & ".xml"
			xmlParserConfigFile = ReadFile(IPTWxmlParserConfigFile)
			beginXMLPos = Find(xmlParserConfigFile, "<sourcefile>") + 12
			endXMLPos = Find(xmlParserConfigFile, "</sourcefile>", beginXMLPos)
			oldXMLFile = SubStr(xmlParserConfigFile, beginXMLPos, endXMLPos - beginXMLPos)
			If (IPTWdataFile ne oldXMLFile)
				xmlParserConfigFile = Replace(xmlParserConfigFile, oldXMLFile, IPTWdataFile)
				WriteFile(IPTWxmlParserConfigFile, xmlParserConfigFile)
			EndIf
# ############################################################################
# delete all old data from the registry
			IPTWcurrentRegKey = IPTWappRegKey \ argv[1]
			ForEach value, data in regValues(IPTWregRoot, IPTWcurrentRegKey)
				If (value ne "ACSuspendTimeout" \
					AND value ne "ACTimeout" \
					AND value ne "BatteryTimeout" \
					AND value ne "BattSuspendTimeout" \
					AND value ne "ShowingForecast" \
					AND value ne "sleepOnUpdatePrevented" \
					AND value ne "lastShownIconsNumber" \
					AND value ne "lastShownForecastLocation" \
					AND value ne "Started")
					If (RegValueExists(IPTWregRoot, IPTWappRegKey, value))
						RegDelete(IPTWregRoot, IPTWappRegKey, value)
					EndIf
					If (RegValueExists(IPTWregRoot, IPTWcurrentRegKey, value))
						RegDelete(IPTWregRoot, IPTWcurrentRegKey, value)
					EndIf
				EndIf
			EndForEach
			RunWait(SystemPath("ScriptPath") \ "xml2reg.exe", IPTWxmlParserConfigFile)
			RegWriteString(IPTWregRoot, IPTWcurrentRegKey, "updateTime", TimeStamp())

			daysOfWeek = Array("Sunday", "Monday", "Tuesday", "Wednesday", "Thursday", "Friday", "Saturday")
			obsdate0 = RegRead(IPTWregRoot, IPTWappRegKey, "obsdate0")
			wday0 = FormatTime("w", MakeTimeStamp(Part(obsdate0, "/", 3), Part(obsdate0, "/", 1), Part(obsdate0, "/", 2)))
			i = 0
			While (RegValueExists(IPTWregRoot, IPTWappRegKey, "obsdate" & i))
				RegWriteString(IPTWregRoot, IPTWappRegKey, "weekday" & i, daysOfWeek[(wday0 + i) MOD 7 + 1])
				i += 1
			EndWhile

# ############################################################################
# copy all data to the location registry key
			ForEach value, data in regValues(IPTWregRoot, IPTWappRegKey)
				If (value ne "ACSuspendTimeout" \
					AND value ne "ACTimeout" \
					AND value ne "BatteryTimeout" \
					AND value ne "BattSuspendTimeout" \
					AND value ne "ShowingForecast" \
					AND value ne "sleepOnUpdatePrevented" \
					AND value ne "lastShownIconsNumber" \
					AND value ne "lastShownForecastLocation" \
					AND value ne "Started")
					 RegWriteString(IPTWregRoot, IPTWcurrentRegKey, value, data)
				EndIf
			EndForEach

			url = RegRead(IPTWregRoot, IPTWcurrentRegKey, "url")
			locationCodeBegin = ReverseFind(url, "=") + 1
			locationCode = SubStr(url, locationCodeBegin)
			RegWriteString(IPTWregRoot, IPTWcurrentRegKey, "locationCode", locationCode)
		EndIf
	EndIf
EndSub

Sub IPTWreloadData
	changeExecFieldForMainLocation = FALSE
	iPTiconNum = 0
#Update favorite locations current weather icon for all favorite locations marked with a *
	If (Find(IPTWaccuWeatherFavoriteLocations, "+") <> 0 AND IPTWFIP eq "")
		locationsArray = Split(IPTWaccuWeatherFavoriteLocations, ";")
		ForEach IPTWaccuWeatherFavoriteLocation in array(locationsArray)
			If (SubStr(IPTWaccuWeatherFavoriteLocation, 1, 1) eq "+" OR SubStr(IPTWaccuWeatherFavoriteLocation, 2, 1) eq "+")
				IPTWaccuWeatherFavoriteLocationCode = Part(IPTWaccuWeatherFavoriteLocation, ",", -1, TRUE)
				If (IPTWaccuWeatherFavoriteLocationCode ne IPTWaccuWeatherLocation)
					IPTWcurrentWeatherIcon += 1
					IPTWregKey = IPTWappRegKey \ IPTWaccuWeatherFavoriteLocationCode
					Call("IPTWreload", argv[1], 0)
					iPTiconNum += 1
				Else
					changeExecFieldForMainLocation = TRUE
				EndIf
			EndIf
		EndForEach
		IPTWcurrentWeatherIcon = IPTWcurrentWeatherIcon - iPTiconNum
		IPTWregKey = IPTWappRegKey \ IPTWaccuWeatherLocation
		IPTWaccuWeatherFavoriteLocationCode = IPTWaccuWeatherLocation
	EndIf
	Call("IPTWreload", argv[1], 1)
	Call("waitForReadyIPT", 2)
EndSub

Sub IPTWreload
	reloadScriptPath = argv[1]
	mainLocation = argv[2]
	notUseCurrent = FALSE
	daysToSkip = 0
	Call("IPTWfindDay")
	If (foundDay)
		sunset = SubStr("0" & RegRead(IPTWregRoot, IPTWregKey, "sunset" & daysToSkip), -8)
		sunset = Replace(Part(sunset, " ", 2) & " " & Part(sunset, " ", 1), " 12", " 00")
		If (currenttime gt sunset)
			sunsettime = SubStr("0" & Part(sunset, " ", 2), -5)
			If (Part(sunset, " ", 1) eq "PM")
				sunsettime = (12 + Part(sunsettime, ":", 1)) & ":" & Part(sunsettime, ":", 2)
			EndIf
			obstime = RegRead(IPTWregRoot, IPTWregKey, "obstime")
			If (daysToSkip = 0 AND obstime gt sunsettime)
				iPhoneTodayPic = RegRead(IPTWregRoot, IPTWregKey, "icon0") & IPTWnightIconSuffix & "." & IPTWiconsExtension
			Else
				notUseCurrent = TRUE
				iPhoneTodayPic = RegRead(IPTWregRoot, IPTWregKey, "iconN" & daysToSkip) & IPTWnightIconSuffix & "." & IPTWiconsExtension
			EndIf
			suffix = "N"
		Else
			sunrise = SubStr("0" & RegRead(IPTWregRoot, IPTWregKey, "sunrise" & daysToSkip), -8)
			sunrise = Replace(Part(sunrise, " ", 2) & " " & Part(sunrise, " ", 1), " 12", " 00")
			If (currenttime lt sunrise)
				If (daysToSkip = 0)
					iPhoneTodayPic = RegRead(IPTWregRoot, IPTWregKey, "icon0") & IPTWnightIconSuffix & "." & IPTWiconsExtension
				Else
					daysToSkip = daysToSkip - 1
					iPhoneTodayPic = RegRead(IPTWregRoot, IPTWregKey, "iconN" & daysToSkip) & IPTWnightIconSuffix & "." & IPTWiconsExtension
					notUseCurrent = TRUE
				EndIf
				suffix = "N"
			Else
				sunrisetime = SubStr("0" & Part(sunrise, " ", 2), -5)
				If (Part(sunrise, " ", 1) eq "PM")
					sunrisetime = (12 + Part(sunrisetime, ":", 1)) & ":" & Part(sunrisetime, ":", 2)
				EndIf
				obstime = RegRead(IPTWregRoot, IPTWregKey, "obstime")
				If (daysToSkip = 0 AND obstime gt sunrisetime)
					iPhoneTodayPic = RegRead(IPTWregRoot, IPTWregKey, "icon0") & "." & IPTWiconsExtension
				Else
					notUseCurrent = TRUE
					iPhoneTodayPic = RegRead(IPTWregRoot, IPTWregKey, "iconD" & daysToSkip) & "." & IPTWiconsExtension
				EndIf
				suffix = "D"
			EndIf
		EndIf
		If (mainLocation)
			CallScript(reloadScriptPath \ "IPTWreloadS2U2.mscr", daysToSkip + 1)
		EndIf
		CallScript(reloadScriptPath \ "IPTWreloadIcon.mscr", IPTWcurrentWeatherPage, IPTWcurrentWeatherIcon, daysToSkip, iPhoneTodayPic, notUseCurrent)
	Else
		iPhoneTodayPic = "AccuWeather" & "." & IPTWiconsExtension
		If (mainLocation)
			CallScript(reloadScriptPath \ "IPTWreloadS2U2.mscr", -1)
		EndIf
		CallScript(reloadScriptPath \ "IPTWreloadIcon.mscr", IPTWcurrentWeatherPage, IPTWcurrentWeatherIcon, "N/A", iPhoneTodayPic)
	EndIf
EndSub

Sub waitForReadyIPT
	If (NOT IPTWiPhoneTodayDisabled)
		maxTryTime = TimeStamp() + 20
		If (argv[1] = 1 AND NOT IPTWwriteForecastInFile)
			While(RegRead("HKLM", "\Software" \ IPTWiPhoneTodayClassName, "reloadIcons") <> 0 AND TimeStamp() < maxTryTime)
				Sleep(200)
			EndWhile
			If (RegRead("HKLM", "\Software" \ IPTWiPhoneTodayClassName, "reloadIcons"))
				RegWriteDWord("HKLM", "\Software" \ IPTWiPhoneTodayClassName, "reloadIcons", 0)
				If (NOT IPTWwriteForecastInFile)
					Exit
				EndIf
			EndIf
		ElseIf (argv[1] = 2)
			While(RegRead("HKLM", "\Software" \ IPTWiPhoneTodayClassName, "reloadIcon") AND RegKeyExists("HKLM", "\Software" \ IPTWiPhoneTodayClassName \ "icon0"))
				Sleep(200)
			EndWhile
			Sleep(500)
		EndIf
	EndIf
EndSub

Sub IPTWfindDay
	foundDay = FALSE
	While (NOT foundDay AND RegValueExists(IPTWregRoot, IPTWregKey, "obsdate" & daysToSkip))
		obsdate = RegRead(IPTWregRoot, IPTWregKey, "obsdate" & daysToSkip)
		obsdate = Part(obsdate, "/", 3) & "/" & SubStr("0" & Part(obsdate, "/", 1), -2) & "/" & SubStr("0" & Part(obsdate, "/", 2), -2)
		If (obsdate ge currentDate)
			foundDay = TRUE
		Else
			daysToSkip += 1
		EndIf
	EndWhile
EndSub

Sub IPTWsetCurrentTimeAndDate
	timeZone = RegRead(IPTWregRoot, IPTWregKey, "timeZone")
	deviceTimeZone = 60 * (TimeZoneBias() - 60 * Eval(RegRead(IPTWregRoot, IPTWregKey, "isDayLight")))
	dataTimeZone = timeZone * 3600
	timeOffset = dataTimeZone - deviceTimeZone
	currentLocalTime = TimeStamp() + timeOffset
	currentDate = FormatTime("Y/m/d", currentLocalTime)
	currenttime = Replace(FormatTime("A h:i", currentLocalTime), " 12", " 00")
EndSub

Sub IPTWtriggerPowerManagementChange
	BatteryTimeout = RegRead("HKCU", "ControlPanel\Backlight", "BatteryTimeout")
	ACTimeout = RegRead("HKCU", "ControlPanel\Backlight", "ACTimeout")
	RegWriteDword("HKCU", "ControlPanel\Backlight", "BatteryTimeout", 0)
	RegWriteDword("HKCU", "ControlPanel\Backlight", "ACTimeout", 0)
	RegWriteDword("HKCU", "ControlPanel\Backlight", "BatteryTimeout", BatteryTimeout)
	RegWriteDword("HKCU", "ControlPanel\Backlight", "ACTimeout", ACTimeout)
EndSub

Sub IPTWgetIPTPage
	iPTPage = argv[1]
	If (Find(iPTPage, "header:"))
		IPTWiPhoneTodayPath = RegRead("HKLM", "Software\Microsoft\Today\Items\iPhoneToday", "DLL")
		IPTWiPhoneTodayPath = Replace(IPTWiPhoneTodayPath, "iPhoneToday.dll", "")
		headernum = 0
		If (FileExists(IPTWiPhoneTodayPath \ "icons.xml"))
			iPTPage = Part(iPTPage, "header:", 2)
			iconsXml = ReadFile(IPTWiPhoneTodayPath \ "icons.xml")
			pos = Find(iconsXml, "screen header=")
			While (pos > 0)
				endPos = Find(iconsXml, """>", pos)
				currentHeader = SubStr(iconsXml, pos + 14, endPos - pos - 13)
				If (currentHeader eq iPTPage)
					pos = 0
				Else
					headerNum += 1
					pos = Find(iconsXml, "screen header=", endPos)
				EndIf
			EndWhile
		EndIf
		iPTPage = headernum
	EndIf
	Return(iPTPage)
EndSub
