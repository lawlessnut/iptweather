ErrorLevel("off")

Include("IPTWsubs.mscr")

# ############################################################################
# retrieve user preference
IPTWaccuWeatherMetric		= IniRead("..\weather.ini", "User settings", "IPTWaccuWeatherMetric")
IPTWaccuWeatherLocation		= IniRead("..\weather.ini", "User settings", "IPTWaccuWeatherLocation")
IPTWdelayHours				= IniRead("..\weather.ini", "User settings", "IPTWdelayHours")
IPTWdelayMinutes			= IniRead("..\weather.ini", "User settings", "IPTWdelayMinutes")
IPTWinternetConnection		= IniRead("..\weather.ini", "User settings", "IPTWinternetConnection")
IPTWdisconnectOnExit		= IniRead("..\weather.ini", "User settings", "IPTWdisconnectOnExit")
IPTWcurrentWeatherIcon		= IniRead("..\weather.ini", "User settings", "IPTWcurrentWeatherIcon")
IPTWcurrentWeatherPage		= IniRead("..\weather.ini", "User settings", "IPTWcurrentWeatherPage")
IPTWiconsExtension			= IniRead("..\weather.ini", "User settings", "IPTWiconsExtension")
IPTWobsoleteDataPrefix		= IniRead("..\weather.ini", "User settings", "IPTWobsoleteDataPrefix")
IPTWwakeUpOnUpdate			= IniRead("..\weather.ini", "User settings", "IPTWwakeUpOnUpdate")
IPTWpreventSleepOnUpdate	= IniRead("..\weather.ini", "User settings", "IPTWpreventSleepOnUpdate")
IPTWnightIconSuffix			= IniRead("..\weather.ini", "User settings", "IPTWnightIconSuffix")
IPTWgoogleUserID			= IniRead("..\weather.ini", "User settings", "IPTWgoogleUserID")
IPTWiPhoneTodayDisabled		= IniRead("..\weather.ini", "User settings", "IPTWiPhoneTodayDisabled")
IPTWlanguageFile			= IniRead("..\weather.ini", "User settings", "IPTWlanguageFile")
IPTWaccuWeatherIconPath		= IniRead("..\weather.ini", "User settings", "IPTWaccuWeatherIconPath")
IPTWaccuWeatherAPI			= IniRead("..\weather.ini", "User settings", "IPTWaccuWeatherAPI")
IPTWvjvolubilisPath			= IniRead("..\weather.ini", "User settings", "IPTWvjvolubilisPath")
IPTWwriteForecastInFile		= IniRead("..\weather.ini", "User settings", "IPTWwriteForecastInFile")
IPTWaccuWeatherFavoriteLocations	= IniRead("..\weather.ini", "User settings", "IPTWaccuWeatherFavoriteLocations")

If (IPTWaccuWeatherAPI eq "")
	IPTWaccuWeatherAPI = "ruan"
EndIf

If (IPTWiPhoneTodayDisabled <> 1)
	If (NOT RegRead("HKLM", "Software\Microsoft\Today\Items\iPhoneToday", "Enabled") AND NOT ProcExists("iPhoneToday.exe") AND NOT ProcExists("iPhoneTodayDesktop.exe"))
		If (IPTWiPhoneTodayDisabled <> -1)
			IniWrite("..\weather.ini", "User settings", "IPTWiPhoneTodayDisabled", 1)
		EndIf
		IPTWiPhoneTodayDisabled = 1
	ElseIf (IPTWiPhoneTodayDisabled = -1)
		IPTWiPhoneTodayDisabled = 0
	EndIf
EndIf

# ############################################################################
# configure location of parsed weather data in registry
IPTWregRoot				= IniRead("..\weather.ini", "Script settings", "IPTWregRoot")
IPTWappRegKey			= IniRead("..\weather.ini", "Script settings", "IPTWregKey")
IPTWregKey				= IPTWappRegKey \ IPTWaccuWeatherLocation
IPTWdataFile			= SystemPath("ScriptPath") \ "data.xml"
IPTWaccuWeatherURL = "http://" & IPTWaccuWeatherAPI & ".accu-weather.com/widget/" & IPTWaccuWeatherAPI & "/weather-data.asp?"

# ############################################################################
# Set App-to-date version file path
versionFilePath = SystemPath("ScriptPath") \ "version.xml"
RegWriteString("HKCU", "Software\MoDaCo\AppToDate\XML", "IPTWeather", versionFilePath)

If (IPTWwakeUpOnUpdate)
	ToggleDisplay(ON)
EndIf

# ############################################################################
# set up for next notification
# kill any lingering notification
mort = SystemPath("ScriptExe") \ "MortScript.exe"
script = SystemPath("ScriptPath") \ SystemPath("ScriptName") & SystemPath("ScriptExt")
If (IPTWdelayHours <> 0 OR IPTWdelayMinutes <> 0)
	utime = TimeStamp() + (IPTWdelayHours * 60 + IPTWdelayMinutes) * 60
	# set notify for myself at next time
	RemoveNotifications(mort, """" & script & """") 
	RunAt(utime, mort, """" & script & """")
EndIf

# ############################################################################
# last data observation date and time
lastobsdate = RegRead(IPTWregRoot, IPTWregKey, "obsdate0")
lastobsdate = SubStr("0" & Part(lastobsdate, "/", 1), -2) & "/" & SubStr("0" & Part(lastobsdate, "/", 2), -2) & "/" & Part(lastobsdate, "/", 3)
lastobstime = RegRead(IPTWregRoot, IPTWregKey, "obstime")
lastlocation = RegRead(IPTWregRoot, IPTWappRegKey, "locationCode")

# ############################################################################
# load data
didconnect = FALSE
If (IPTWpreventSleepOnUpdate)
	sleepOnUpdatePrevented = RegRead(IPTWregRoot, IPTWappRegKey, "sleepOnUpdatePrevented")
	If (sleepOnUpdatePrevented = 1)
		BattSuspendTimeout = RegRead(IPTWregRoot, IPTWappRegKey, "BattSuspendTimeout")
		ACSuspendTimeout = RegRead(IPTWregRoot, IPTWappRegKey, "ACSuspendTimeout")
		BatteryTimeout = RegRead(IPTWregRoot, IPTWappRegKey, "BatteryTimeout")
		ACTimeout = RegRead(IPTWregRoot, IPTWappRegKey, "ACTimeout")
	Else
		BattSuspendTimeout = RegRead("HKLM", "System\CurrentControlSet\Control\Power\Timeouts", "BattSuspendTimeout")
		ACSuspendTimeout = RegRead("HKLM", "System\CurrentControlSet\Control\Power\Timeouts", "ACSuspendTimeout")
		BatteryTimeout = RegRead("HKCU", "ControlPanel\Backlight", "BatteryTimeout")
		ACTimeout = RegRead("HKCU", "ControlPanel\Backlight", "ACTimeout")

		RegWriteDword(IPTWregRoot, IPTWappRegKey,"BattSuspendTimeout", BattSuspendTimeout)
		RegWriteDword(IPTWregRoot, IPTWappRegKey, "BatteryTimeout", BatteryTimeout)
		RegWriteDword(IPTWregRoot, IPTWappRegKey,"ACSuspendTimeout", ACSuspendTimeout)
		RegWriteDword(IPTWregRoot, IPTWappRegKey, "ACTimeout", ACTimeout)
	EndIf

	RegWriteDword("HKLM", "System\CurrentControlSet\Control\Power\Timeouts","BattSuspendTimeout", 0)
	RegWriteDword("HKCU", "ControlPanel\Backlight", "BatteryTimeout", 0)
	RegWriteDword("HKLM", "System\CurrentControlSet\Control\Power\Timeouts","ACSuspendTimeout", 0)
	RegWriteDword("HKCU", "ControlPanel\Backlight", "ACTimeout", 0)

	RegWriteDword(IPTWregRoot, IPTWappRegKey, "sleepOnUpdatePrevented", 1)
EndIf

If (NOT InternetConnected("http://www.perdu.com"))
	If (IPTWinternetConnection eq "VJVolubilis")
		If (FileExists(IPTWvjvolubilisPath))
			RunWait(IPTWvjvolubilisPath, "-gprson")
			didconnect = TRUE
		EndIf
	Else
		Connect(IPTWinternetConnection)
		didconnect = TRUE
	EndIf
	nbSleeps = 0
	While(NOT InternetConnected("http://www.perdu.com") AND nbSleeps < 6)
		Sleep(5000)
		nbSleeps = nbSleeps + 1
	EndWhile
EndIf

dataUpdated = 0
Call("IPTWdownload", IPTWaccuWeatherLocation)

disconnectThenExit = 0
If (NOT FileExists(IPTWdataFile))
	iPhoneTodayPic = "AccuWeather." & IPTWiconsExtension
	CallScript("IPTWreloadIcon.mscr", IPTWcurrentWeatherPage, IPTWcurrentWeatherIcon, "N/A", iPhoneTodayPic)
	RegWriteDWord(IPTWregRoot, IPTWappRegKey, "Started", 0)
	CallScript("IPTWreloadS2U2.mscr", -1)
	disconnectThenExit = 1
EndIf

If (Find(data, "<failure>") > 0 OR Find(data, "<error>") > 0)
	iPhoneTodayPic = "AccuWeather." & IPTWiconsExtension
	CallScript("IPTWreloadIcon.mscr", IPTWcurrentWeatherPage, IPTWcurrentWeatherIcon, "Error", iPhoneTodayPic)
	RegWriteDWord(IPTWregRoot, IPTWappRegKey, "Started", 0)
	CallScript("IPTWreloadS2U2.mscr", -1)
	disconnectThenExit = 1
EndIf

If (dataUpdated AND NOT disconnectThenExit)
	Call("IPTWparse", IPTWaccuWeatherLocation)
EndIf

#Update favorite locations data for all favorite locations marked with a *
If (Find(IPTWaccuWeatherFavoriteLocations, "*") <> 0)
	locationsArray = Split(IPTWaccuWeatherFavoriteLocations, ";")
	ForEach IPTWaccuWeatherFavoriteLocation in array(locationsArray)
		If (SubStr(IPTWaccuWeatherFavoriteLocation, 1, 1) eq "*")
			IPTWaccuWeatherFavoriteLocationCode = Part(IPTWaccuWeatherFavoriteLocation, ",", -1, TRUE)
			If (IPTWaccuWeatherFavoriteLocationCode ne IPTWaccuWeatherLocation)
				Call("IPTWdownload", IPTWaccuWeatherFavoriteLocationCode)
				If (Find(data, "<failure>") = 0 AND Find(data, "<error>") = 0)
					Call("IPTWparse", IPTWaccuWeatherFavoriteLocationCode)
				EndIf
			EndIf
		EndIf
	EndForEach
EndIf

If (IPTWdisconnectOnExit AND didconnect)
	If (IPTWinternetConnection eq "VJVolubilis")
		If (FileExists(IPTWvjvolubilisPath))
			Run(IPTWvjvolubilisPath, "-gprsoff")
		EndIf
	Else
		CloseConnection
		Disconnect
	EndIf
EndIf

If (IPTWpreventSleepOnUpdate)
	RegWriteDword ("HKLM", "System\CurrentControlSet\Control\Power\Timeouts", "BattSuspendTimeout", BattSuspendTimeout)
	RegWriteDword ("HKLM", "System\CurrentControlSet\Control\Power\Timeouts", "ACSuspendTimeout", ACSuspendTimeout)
	RegWriteDword ("HKCU", "ControlPanel\Backlight", "BatteryTimeout", BatteryTimeout)
	RegWriteDword ("HKCU", "ControlPanel\Backlight", "ACTimeout", ACTimeout)

	RegWriteDword(IPTWregRoot, IPTWappRegKey, "sleepOnUpdatePrevented", 0)
EndIf

If (disconnectThenExit)
	Exit
EndIf

# ############################################################################
# new data observation date and time
newobsdate = RegRead(IPTWregRoot, IPTWregKey, "obsdate0")
newobsdate = SubStr("0" & Part(newobsdate, "/", 1), -2) & "/" & SubStr("0" & Part(newobsdate, "/", 2), -2) & "/" & Part(newobsdate, "/", 3)
newobstime = RegRead(IPTWregRoot, IPTWregKey, "obstime")
newlocation = RegRead(IPTWregRoot, IPTWregKey, "locationCode")

# ############################################################################
# is the first run of getAccuWeather after phone starts
isStarted = RegRead(IPTWregRoot, IPTWappRegKey, "Started")

Call("IPTWsetCurrentTimeAndDate")

# new not obsolete data, so update
If (isStarted = 0 OR ((newobsdate eq currentDate) AND ((lastlocation ne newlocation) OR (lastobsdate ne newobsdate) OR (lastobstime ne newobstime))))
	Call("IPTWreloadData", 0, SystemPath("ScriptPath"))
Else
# If change of day, we retrieve previous night forecast as current condition
	If (newobsdate ne currentDate)
		Call("IPTWreloadData", 1, SystemPath("ScriptPath"))
	EndIf
EndIf

RegWriteDWord(IPTWregRoot, IPTWappRegKey, "Started", 1)

Call("waitForReadyIPT", 2)
